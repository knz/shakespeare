role node
  cleanup if test -e pid; then kill $(cat pid) && sleep 1 && kill -9 $(cat pid) || true; fi
  spotlight tail -F cockroach-data/logs/cockroach.log | 
  		  stdbuf -oL grep '^[WEF]' | 
		  stdbuf -oL grep -v 'server is not accepting clients'
  signal warning event at ^W(?P<ts_log>\d{6} \d\d:\d\d:\d\d\.\d{6})\s+\d+\s+\S+\s+(?P<event>.*)$
  signal error event at ^E(?P<ts_log>\d{6} \d\d:\d\d:\d\d\.\d{6})\s+\d+\s+\S+\s+(?P<event>.*)$
  signal fatal event at ^F(?P<ts_log>\d{6} \d\d:\d\d:\d\d\.\d{6})\s+\d+\s+\S+\s+(?P<event>.*)$
  :start test -e surl || mkfifo surl; 
			$COCKROACH start --insecure --background \
					   $peers --port=$p --http-port=$h \
					   --pid-file=pid --listening-url-file=surl \
					   >start.log 2>&1; ret=$?; 
			cat surl; exit $ret
end
role client
  cleanup if test -e wpid; then kill $(cat wpid) && sleep 1 && kill -9 $(cat wpid) || true; fi; rm -f kv.log
  spotlight tail -F kv.log
  signal errors delta at ^(?P<ts_rfc3339>\d\d\d\d-\d\d-\d\dT\d\d:\d\d:\d\d(?:\.\d+)Z)\s+(?P<delta>\S+).*$
  signal throughput scalar at ^(?P<ts_rfc3339>\d\d\d\d-\d\d-\d\dT\d\d:\d\d:\d\d(?:\.\d+)Z)\s+\S+\s+(?P<scalar>\S+).*$
  signal lat50 scalar at ^(?P<ts_rfc3339>\d\d\d\d-\d\d-\d\dT\d\d:\d\d:\d\d(?:\.\d+)Z)(?:\s+\S+){3}\s+(?P<scalar>\S+).*$
  signal lat95 scalar at ^(?P<ts_rfc3339>\d\d\d\d-\d\d-\d\dT\d\d:\d\d:\d\d(?:\.\d+)Z)(?:\s+\S+){4}\s+(?P<scalar>\S+).*$
  signal lat99 scalar at ^(?P<ts_rfc3339>\d\d\d\d-\d\d-\d\dT\d\d:\d\d:\d\d(?:\.\d+)Z)(?:\s+\S+){5}\s+(?P<scalar>\S+).*$
  :prepare $COCKROACH workload init kv --drop --db db$port --pprofport $pprof \
			'postgres://root@localhost:'$port'?sslmode=disable'
  :start $COCKROACH workload run kv --db db$port --pprofport $pprof \
  			--concurrency 1 --max-rate 200 --cycle-length 10 \
			--display-every .25s --abstime --skip-final-report --tolerate-errors \
			'postgres://root@localhost:'$port'?sslmode=disable' \
			>kv.log 2>&1 & echo $!>wpid
end
role nemesis
  :stop $COCKROACH quit --insecure --port=$p
  :restart cd ../$node && 
        $COCKROACH start --insecure --background  \
		--port=$p --http-port=$h \
		--pid-file=pid --listening-url-file=surl \
		>>restart.log 2>&1; ret=$?; \
		cat surl; exit $ret
end
cast
  n1 plays node(p=26257 h=8081 peers=)
  # n1 plays from working directory artifacts/n1
  # n1 warnings are watched by audience server_events
  # n1 errors are watched by audience server_events
  # n1 fatals are watched by audience server_events
  n2 plays node(p=26258 h=8082 peers=--join=localhost:26257,localhost:26259)
  # n2 plays from working directory artifacts/n2
  # n2 warnings are watched by audience server_events
  # n2 errors are watched by audience server_events
  # n2 fatals are watched by audience server_events
  n3 plays node(p=26259 h=8083 peers=--join=localhost:26257,localhost:26258)
  # n3 plays from working directory artifacts/n3
  # n3 warnings are watched by audience server_events
  # n3 errors are watched by audience server_events
  # n3 fatals are watched by audience server_events
  kv1 plays client(port=26257 pprof=33331)
  # kv1 plays from working directory artifacts/kv1
  # kv1 throughputs are watched by audience throughput
  # kv1 lat50s are watched by audience latency_fail
  # kv1 errors are watched by audience client_errors
  kv2 plays client(port=26258 pprof=33332)
  # kv2 plays from working directory artifacts/kv2
  # kv2 throughputs are watched by audience ref, throughput
  # kv2 lat99s are watched by audience ref, latency_ok
  # kv2 lat50s are watched by audience latency_ok
  # kv2 errors are watched by audience client_errors
  badguy plays nemesis(node=n1 p=26257 h=8081)
  # badguy plays from working directory artifacts/badguy
end
script
  tempo 1s
  action . entails nop
  action s entails :start
  action c entails :prepare
  action c entails :start
  action c entails mood blue
  action F entails mood orange
  action F entails :stop
  action F entails mood red
  action R entails mood yellow
  action R entails :restart
  action R entails mood clear
  action C entails mood orange
  action C entails :stop
  action C entails mood yellow
  action C entails :restart
  action C entails mood clear
  prompt n1         s
  prompt n2         s
  prompt n3         s
  prompt kv1        .c
  prompt kv2        .c
  prompt badguy     ......F....................R.....
end
audience
  # ref sensitive to mood
  # throughput sensitive to mood
  # latency_ok sensitive to mood
  # ref sensitive to kv2 throughput
  # throughput sensitive to kv2 throughput
  # ref sensitive to tp_ref_values(collection)
  # ref sensitive to tp_ref
  # throughput sensitive to tp_ref
  # ref sensitive to kv2 lat99
  # latency_ok sensitive to kv2 lat99
  # ref sensitive to lat99_ref_values(collection)
  # ref sensitive to lat99_ref
  # latency_ok sensitive to lat99_ref
  # throughput sensitive to kv1 throughput
  # latency_ok sensitive to kv2 lat50
  # latency_fail sensitive to kv1 lat50
  # client_errors sensitive to kv1 errors
  # client_errors sensitive to kv2 errors
  # server_events sensitive to n1 warning
  # server_events sensitive to n2 warning
  # server_events sensitive to n3 warning
  # server_events sensitive to n1 error
  # server_events sensitive to n2 error
  # server_events sensitive to n3 error
  # server_events sensitive to n1 fatal
  # server_events sensitive to n2 fatal
  # server_events sensitive to n3 fatal
  ref audits only while mood == 'blue'
  ref collects tp_ref_values as top 5 [kv2 throughput]
  ref computes tp_ref as avg(tp_ref_values)
  ref collects lat99_ref_values as bottom 5 [kv2 lat99]
  ref computes lat99_ref as avg(lat99_ref_values)
  ref watches kv2 throughput
  ref watches tp_ref
  ref watches kv2 lat99
  ref watches lat99_ref
  ref only helps
  throughput audits only while mood != 'blue'
  throughput expects always: [kv2 throughput] >= (tp_ref / 2)
  throughput watches kv2 throughput
  throughput watches kv1 throughput
  throughput watches tp_ref
  throughput measures client ops/s
  latency_ok audits only while mood != 'blue'
  latency_ok expects always: [kv2 lat99] <= (3 * lat99_ref)
  latency_ok watches kv2 lat50
  latency_ok watches kv2 lat99
  latency_ok watches lat99_ref
  latency_ok measures client latency (ms)
  latency_fail watches kv1 lat50
  latency_fail measures client latency (ms)
  client_errors watches kv1 errors
  client_errors watches kv2 errors
  client_errors measures client errors
  server_events watches n1 warning
  server_events watches n2 warning
  server_events watches n3 warning
  server_events watches n1 error
  server_events watches n2 error
  server_events watches n3 error
  server_events watches n1 fatal
  server_events watches n2 fatal
  server_events watches n3 fatal
  server_events measures occurrences (y value is source index)
end

# play
#  n1: start!
#  (meanwhile)
#  n2: start!
#  (meanwhile)
#  n3: start!
#  (wait until 1s)
#  kv1: prepare!
#  kv1: start!
#  (mood: blue)
#  (meanwhile)
#  kv2: prepare!
#  kv2: start!
#  (mood: blue)
#  (wait until 6s)
#  (mood: orange)
#  badguy: stop!
#  (mood: red)
#  (wait until 27s)
#  (mood: yellow)
#  badguy: restart!
#  (mood: clear)
#  (wait until 33s)
# end
