title survivability

parameter cluster_size defaults to 3
parameter nemesis defaults to quit_nemesis

include cockroach.cfg
include workload_kv.cfg
include ~nemesis~.cfg

title ~cluster_size~ nodes
title two clients
cast
  n* play ~cluster_size~ nodes with p=$((26256+$i)) h=$((8080+$i)) peers=localhost:$((26257+$i%~cluster_size~)),localhost:$((26257+($i+1)%~cluster_size~))
  # n4 plays node(p=26260 h=8084 peers=--join=localhost:26257,localhost:26258)
  # client on node that gets stopped
  kv* play 2 clients with port=$((26256+$i)) pprof=$((33330+$i))
  badguy plays ~nemesis~ with node=n1 p=26257 h=8081
end

include cockroach_nemesis_scenario_short.cfg
#include cockroach_nemesis_scenario_long.cfg

script
 repeat from F
end

audience
  ref audits only while mood == 'blue'
  ref collects tp_ref_values as top 5 [kv2 throughput]
  ref computes tp_ref as avg(tp_ref_values)
  ref collects lat99_ref_values as bottom 5 [kv2 lat99]
  ref computes lat99_ref as avg(lat99_ref_values)
  ref only helps

  throughput audits throughout
  throughput expects always: [kv2 throughput] >= (tp_ref / 2)
  throughput watches every client throughput
  throughput measures client ops/s
  throughput watches tp_ref

  #latency_ok	 watches kv2 lat50
  #latency_ok	 watches kv2 lat95
  latency_ok   audits throughout
  latency_ok   expects always: [kv2 lat99] <= (3 * lat99_ref)
  latency_ok   watches kv2 lat99
  latency_ok   watches lat99_ref
  latency_ok   measures client latency (ms)

  latency_fail	watches kv1 lat50
  latency_fail  measures client latency (ms)

  #client_errors    watches every client errors
  #client_errors    measures client errors

  server_events    watches every node warning
  server_events    watches every node error
  server_events    watches every node fatal
  server_events    measures occurrences (y value is source index)

  # Ensure a restart does not last more than 3 seconds.
  #  server_restart_checker audits only while [mood] == 'yellow'
  # server_restart_checker expects always: [moodt] < 3
end
